/*
   This file was generated automatically by the Mojo IDE version B1.3.3.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module game_4 (
    input clk,
    input rst,
    input [3:0] beam_position,
    input on_turn,
    output reg turn_player_out,
    output reg [7:0] score_out,
    output reg [2:0] p1_turn,
    output reg [2:0] p2_turn
  );
  
  
  
  wire [1-1:0] M_edge_detector_out;
  reg [1-1:0] M_edge_detector_in;
  edge_detector_7 edge_detector (
    .clk(clk),
    .in(M_edge_detector_in),
    .out(M_edge_detector_out)
  );
  
  wire [1-1:0] M_button_conditioner_out;
  reg [1-1:0] M_button_conditioner_in;
  button_conditioner_8 button_conditioner (
    .clk(clk),
    .in(M_button_conditioner_in),
    .out(M_button_conditioner_out)
  );
  
  wire [8-1:0] M_alu_result;
  reg [8-1:0] M_alu_a;
  reg [8-1:0] M_alu_b;
  reg [6-1:0] M_alu_alufn;
  alu_9 alu (
    .a(M_alu_a),
    .b(M_alu_b),
    .alufn(M_alu_alufn),
    .result(M_alu_result)
  );
  
  reg M_turn_player_d, M_turn_player_q = 1'h0;
  reg [15:0] M_score_d, M_score_q = 1'h0;
  reg [5:0] M_turns_passed_d, M_turns_passed_q = 1'h0;
  
  always @* begin
    M_score_d = M_score_q;
    M_turns_passed_d = M_turns_passed_q;
    M_turn_player_d = M_turn_player_q;
    
    M_button_conditioner_in = on_turn;
    M_edge_detector_in = M_button_conditioner_out;
    M_alu_a = 1'h0;
    M_alu_b = 1'h0;
    M_alu_alufn = 1'h0;
    if (M_turns_passed_q[0+2-:3] == 3'h7 & M_turns_passed_q[3+2-:3] == 3'h7) begin
      M_alu_a = M_score_q[0+7-:8];
      M_alu_b = M_score_q[8+7-:8];
      M_alu_alufn = 6'h35;
      M_turn_player_d = M_alu_result[0+0-:1];
    end else begin
      if (M_edge_detector_out == 1'h1) begin
        M_alu_a = M_score_q[(M_turn_player_q)*8+7-:8];
        M_alu_b = 1'h0;
        M_alu_alufn = 6'h00;
        
        case (beam_position)
          1'h0: begin
            M_alu_b = 1'h1;
            M_alu_alufn = 6'h20;
          end
          1'h1: begin
            M_alu_b = 3'h4;
            M_alu_alufn = 6'h00;
          end
          2'h2: begin
            M_alu_b = 3'h4;
            M_alu_alufn = 6'h00;
          end
          3'h4: begin
            M_alu_b = 1'h1;
            M_alu_alufn = 6'h00;
          end
          3'h5: begin
            M_alu_b = 1'h1;
            M_alu_alufn = 6'h00;
          end
          3'h7: begin
            M_alu_b = 2'h2;
            M_alu_alufn = 6'h00;
          end
          4'h8: begin
            M_alu_b = 2'h2;
            M_alu_alufn = 6'h00;
          end
          4'h9: begin
            M_alu_b = 2'h2;
            M_alu_alufn = 6'h00;
          end
          4'ha: begin
            M_alu_b = 4'h8;
            M_alu_alufn = 6'h00;
          end
        endcase
        M_score_d[(M_turn_player_q)*8+7-:8] = M_alu_result;
        M_turns_passed_d[(M_turn_player_q)*3+2-:3] = M_turns_passed_q[(M_turn_player_q)*3+2-:3] + 1'h1;
        M_turn_player_d = ~M_turn_player_q;
      end
    end
    turn_player_out = M_turn_player_q;
    score_out = M_score_q[(M_turn_player_q)*8+7-:8];
    p1_turn = M_turns_passed_q[0+2-:3];
    p2_turn = M_turns_passed_q[3+2-:3];
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_turn_player_q <= 1'h0;
      M_score_q <= 1'h0;
      M_turns_passed_q <= 1'h0;
    end else begin
      M_turn_player_q <= M_turn_player_d;
      M_score_q <= M_score_d;
      M_turns_passed_q <= M_turns_passed_d;
    end
  end
  
endmodule
